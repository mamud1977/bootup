Parameters:
  MyVPCCIDR:
    Description: CIDR for this VPC
    Type: String
    Default: 10.10.0.0/16
  
  SubnetCIDR:
    Description: "Comma-delimited list of Subnet CIDR blocks"
    Type: CommaDelimitedList
    Default: "10.10.1.0/24, 10.10.2.0/24, 10.10.3.0/24"

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref MyVPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  VpcCidrBlockIpv6:
    Type: 'AWS::EC2::VPCCidrBlock'
    Properties:
      VpcId: !Ref MyVPC
      AmazonProvidedIpv6CidrBlock: true

### Internet Gateway  ###############################

  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: MyInternetGateway

  AttachInternetGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref MyInternetGateway
      VpcId: !Ref MyVPC 

#### Public Subnet A and B ###################################

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Sub "${AWS::Region}a"
      AssignIpv6AddressOnCreation: True
      Ipv6CidrBlock: !Select [1, !Cidr [!Select [0, !GetAtt 'MyVPC.Ipv6CidrBlocks'], 256, 64]]
      CidrBlock: !Select [0, !Ref SubnetCIDR] # the select function allows us to select across a list
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: SubnetA

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Sub "${AWS::Region}b"
      AssignIpv6AddressOnCreation: True
      Ipv6CidrBlock: !Select [2, !Cidr [!Select [0, !GetAtt 'MyVPC.Ipv6CidrBlocks'], 256, 64]]
      CidrBlock: !Select [1, !Ref SubnetCIDR] # the select function allows us to select across a list
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: SubnetB

 #### Private Subnet C ###################################

  SubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      AvailabilityZone: !Sub "${AWS::Region}c"
      AssignIpv6AddressOnCreation: True
      Ipv6CidrBlock: !Select [3, !Cidr [!Select [0, !GetAtt 'MyVPC.Ipv6CidrBlocks'], 256, 64]]
      CidrBlock: !Select [2, !Ref SubnetCIDR] # the select function allows us to select across a list
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: SubnetC


### Route Table ######################################

  MyRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
      - Key: Name
        Value: MyRouteTable
      VpcId: !Ref MyVPC 

  MySubnetRoute:
    DependsOn: MyInternetGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyRouteTable
      GatewayId: !Ref MyInternetGateway
      DestinationCidrBlock: 0.0.0.0/0

  MySubnetRouteIpv6:
    DependsOn: MyInternetGateway
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyRouteTable
      GatewayId: !Ref MyInternetGateway
      DestinationIpv6CidrBlock: ::/0  

  #### Subnet - Route Table Association #################

  SubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyRouteTable
      SubnetId: !Ref SubnetA

  SubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MyRouteTable
      SubnetId: !Ref SubnetB

#   ## Network ACL  ###############################

#   MyNetworkAcl:
#     Type: AWS::EC2::NetworkAcl
#     Properties:
#       Tags:
#       - Key: Name
#         Value: MyNetworkAcl
#       VpcId: !Ref MyVPC 
  
#   ## Inbound ######

#   MyNetworkAclInboundEntry50:
#     Type: AWS::EC2::NetworkAclEntry
#     Properties:
#       NetworkAclId: !Ref MyNetworkAcl
#       RuleNumber: 50
#       Protocol: -1
#       PortRange:
#         From: 0
#         To: 65535
#       CidrBlock: 192.170.160.0/32
#       RuleAction: allow
#       Egress: false # Inbound rule
  
  
#   MyNetworkAclInboundEntry1001:
#     Type: AWS::EC2::NetworkAclEntry
#     Properties:
#       NetworkAclId: !Ref MyNetworkAcl
#       RuleNumber: 1001
#       Protocol: 6  # TCP protocol
#       PortRange:
#         From: 22
#         To: 22
#       CidrBlock: 0.0.0.0/0
#       RuleAction: allow
#       Egress: false # Inbound rule
      
#   MyNetworkAclInboundEntry1002:
#     Type: AWS::EC2::NetworkAclEntry
#     Properties:
#       NetworkAclId: !Ref MyNetworkAcl
#       RuleNumber: 1002
#       Protocol: 6  # TCP protocol
#       PortRange:
#         From: 80
#         To: 80
#       CidrBlock: 0.0.0.0/0
#       RuleAction: allow
#       Egress: false # Inbound rule
    
#   MyNetworkAclInboundEntry1003:
#     Type: AWS::EC2::NetworkAclEntry
#     Properties:
#       NetworkAclId: !Ref MyNetworkAcl
#       RuleNumber: 1003
#       Protocol: 6  # TCP protocol
#       PortRange:
#         From: 22
#         To: 22
#       Ipv6CidrBlock: ::/0
#       RuleAction: allow
#       Egress: false # Inbound rule    
      
#   MyNetworkAclInboundEntry1004:
#     Type: AWS::EC2::NetworkAclEntry
#     Properties:
#       NetworkAclId: !Ref MyNetworkAcl
#       RuleNumber: 1004
#       Protocol: 6  # TCP protocol
#       PortRange:
#         From: 80
#         To: 80
#       Ipv6CidrBlock: ::/0
#       RuleAction: allow
#       Egress: false # Inbound rule

# ## Outbound ######

#   MyNetworkAclOutboundEntry1001:
#     Type: AWS::EC2::NetworkAclEntry
#     Properties:
#       NetworkAclId: !Ref MyNetworkAcl
#       RuleNumber: 1001
#       Protocol: 6  # TCP protocol
#       PortRange:
#         From: 22
#         To: 22
#       CidrBlock: 0.0.0.0/0
#       RuleAction: allow
#       Egress: true # Outbound rule    

#   MyNetworkAclOutboundEntry1002:
#     Type: AWS::EC2::NetworkAclEntry
#     Properties:
#       NetworkAclId: !Ref MyNetworkAcl
#       RuleNumber: 1002
#       Protocol: 6  # TCP protocol
#       PortRange:
#         From: 80
#         To: 80
#       CidrBlock: 0.0.0.0/0
#       RuleAction: allow
#       Egress: true # Outbound rule  

#   MyNetworkAclOutboundEntry1003:
#     Type: AWS::EC2::NetworkAclEntry
#     Properties:
#       NetworkAclId: !Ref MyNetworkAcl
#       RuleNumber: 1003
#       Protocol: 6  # TCP protocol
#       PortRange:
#         From: 22
#         To: 22
#       Ipv6CidrBlock: ::/0
#       RuleAction: allow
#       Egress: true # Outbound rule    

#   MyNetworkAclOutboundEntry1004:
#     Type: AWS::EC2::NetworkAclEntry
#     Properties:
#       NetworkAclId: !Ref MyNetworkAcl
#       RuleNumber: 1004
#       Protocol: 6  # TCP protocol
#       PortRange:
#         From: 80
#         To: 80
#       Ipv6CidrBlock: ::/0
#       RuleAction: allow
#       Egress: true # Outbound rule   

#   #### Subnet A and B - NetworkAcl Association #################

#   SubnetANetworkAclAssociation:
#     Type: AWS::EC2::SubnetNetworkAclAssociation
#     Properties:
#       NetworkAclId: !Ref MyNetworkAcl
#       SubnetId: !Ref SubnetA

#   SubnetBNetworkAclAssociation:
#     Type: AWS::EC2::SubnetNetworkAclAssociation
#     Properties:
#       NetworkAclId: !Ref MyNetworkAcl
#       SubnetId: !Ref SubnetB

  ### Security Groups ##################################

  SGwebaccess:
    Type: AWS::EC2::SecurityGroup
    Properties:
      Tags:
      - Key: Name
        Value: SGwebaccess
      GroupDescription: "Allow SSH and HTTP"
      GroupName: SGwebaccess
      VpcId:  !Ref MyVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIpv6: ::/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIpv6: ::/0

      SecurityGroupEgress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0

      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIpv6: ::/0
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIpv6: ::/0


Outputs:
  MyVPCCIDR:
    Description: "VPC CIDR Block"
    Value: !GetAtt MyVPC.CidrBlock
  
  MyVPC:
    Description: MyVPC
    Value: !Ref MyVPC
    Export:
      Name: MyVPC

  SubnetA:
    Description: SubnetA
    Value: !Ref SubnetA
    Export:
      Name: SubnetA

  SubnetB:
    Description: SubnetB
    Value: !Ref SubnetB
    Export:
      Name: SubnetB
          
  SubnetC:
    Description: SubnetC
    Value: !Ref SubnetC
    Export:
      Name: SubnetC

  SGwebaccess:
    Description: Security group with no ingress rule
    Value: !Ref SGwebaccess
    Export:
      Name: SGwebaccess


